<!DOCTYPE PATCH  SYSTEM "http://vvvv.org/versions/vvvv50beta38.1.dtd" >
   <PATCH nodename="D:\Dropbox\02_Tools\VVVV\vvvversions\vvvv_50beta38.1_x64\packs\FieldTrip\nodes\modules\VF3D\Usages\AsVolume (VF3D.Usages DX11.Volume).v4p" systemname="AsVolume (VF3D.Usages DX11.Volume)" filename="C:\Users\Kyle\Desktop\Dropbox\VVVV Files\vvvv_50beta35.7_x64\packs\FieldTrip\nodes\modules\Implementations\Render\AsVolume\AsVolume (VF3D.Usages DX11.Volume).v4p" scrollx="630" scrolly="0">
   <BOUNDS type="Window" left="14400" top="3150" width="12075" height="11295">
   </BOUNDS>
   <PACK Name="vvvv-Message" Version="2.9.0">
   </PACK>
   <PACK Name="vvvv-ZeroMQ" Version="0.5.3">
   </PACK>
   <PACK Name="VVVV.Packs" Version="0.2.0">
   </PACK>
   <PACK Name="addonpack" Version="38.0.0">
   </PACK>
   <NODE systemname="Semantics (DX11.Layer)" filename="%VVVV%\packs\dx11\nodes\plugins\base\VVVV.DX11.Nodes.dll" nodename="Semantics (DX11.Layer)" componentmode="Hidden" id="2">
   <BOUNDS type="Node" left="2055" top="4965" width="100" height="100">
   </BOUNDS>
   <PIN pinname="Layer In" visible="1" slicecount="1" values="||">
   </PIN>
   <PIN pinname="Layer Out" visible="1">
   </PIN>
   <PIN pinname="Custom Semantics" visible="1" slicecount="1" values="||">
   </PIN>
   <PIN pinname="Resource Semantics" visible="1" slicecount="1" values="||">
   </PIN>
   <PIN pinname="Enabled" slicecount="1" values="1">
   </PIN>
   </NODE>
   <NODE nodename="IOBox (String)" componentmode="InABox" id="5" systemname="IOBox (String)">
   <BOUNDS type="Box" left="675" top="945" width="795" height="240">
   </BOUNDS>
   <BOUNDS type="Node" left="675" top="945" width="0" height="0">
   </BOUNDS>
   <PIN pinname="Default" slicecount="1" values="||">
   </PIN>
   <PIN pinname="File Mask" slicecount="1" values="||">
   </PIN>
   <PIN pinname="Maximum Characters" slicecount="1" values="-1">
   </PIN>
   <PIN pinname="String Type" slicecount="1" values="MultiLine">
   </PIN>
   <PIN pinname="Descriptive Name" slicecount="1" values="|VF3D Function|">
   </PIN>
   <PIN pinname="Output String" visible="1">
   </PIN>
   <PIN pinname="Input String" visible="1" slicecount="1" values="||">
   </PIN>
   </NODE>
   <NODE systemname="Add (String)" nodename="Add (String)" componentmode="Hidden" id="6">
   <BOUNDS type="Node" left="2625" top="3000" width="100" height="100">
   </BOUNDS>
   <PIN pinname="Intersperse" slicecount="1" values="CarriageReturnLineFeed">
   </PIN>
   <PIN pinname="Input 1" visible="1">
   </PIN>
   <PIN pinname="Input 2" visible="1">
   </PIN>
   <PIN pinname="Output" visible="1">
   </PIN>
   </NODE>
   <LINK srcnodeid="5" srcpinname="Output String" dstnodeid="6" dstpinname="Input 1">
   </LINK>
   <NODE systemname="ShaderWatcher (DX11 Shader)" filename="%VVVV%\packs\Happy.fxh\nodes\modules\ShaderWatcher (DX11 Shader).v4p" nodename="ShaderWatcher (DX11 Shader)" componentmode="Hidden" id="9">
   <BOUNDS type="Node" left="3180" top="1830" width="100" height="100">
   </BOUNDS>
   <PIN pinname="File Path" visible="1" slicecount="1" values="..\..\..\..\Happy.fxh\nodes\modules\sdfTemplate.fx">
   </PIN>
   <PIN pinname="Shader Content" visible="1">
   </PIN>
   </NODE>
   <LINK srcnodeid="9" srcpinname="Shader Content" dstnodeid="6" dstpinname="Input 2">
   </LINK>
   <NODE nodename="IOBox (Value Advanced)" componentmode="InABox" id="15" systemname="IOBox (Value Advanced)">
   <BOUNDS type="Box" left="10365" top="945" width="480" height="480">
   </BOUNDS>
   <BOUNDS type="Node" left="10365" top="945" width="0" height="0">
   </BOUNDS>
   <PIN pinname="Y Input Value" slicecount="1" visible="1" values="1">
   </PIN>
   <PIN pinname="Units" slicecount="1" values="||">
   </PIN>
   <PIN pinname="Precision" slicecount="1" values="4">
   </PIN>
   <PIN pinname="Value Type" slicecount="1" values="Boolean">
   </PIN>
   <PIN pinname="Behavior" slicecount="1" values="Toggle">
   </PIN>
   <PIN pinname="Descriptive Name" slicecount="1" values="Enabled">
   </PIN>
   <PIN pinname="Y Output Value" visible="1">
   </PIN>
   </NODE>
   <NODE nodename="IOBox (Node)" componentmode="InABox" id="16" systemname="IOBox (Node)">
   <BOUNDS type="Box" left="2460" top="3705" width="795" height="240">
   </BOUNDS>
   <BOUNDS type="Node" left="2460" top="3705" width="0" height="0">
   </BOUNDS>
   <PIN pinname="Input Node" slicecount="1" visible="1" values="||">
   </PIN>
   <PIN pinname="Descriptive Name" slicecount="1" values="|Render State|">
   </PIN>
   <PIN pinname="Pin Visibility" slicecount="1" values="True">
   </PIN>
   </NODE>
   <NODE nodename="IOBox (Value Advanced)" componentmode="InABox" id="21" systemname="IOBox (Value Advanced)">
   <BOUNDS type="Box" left="5835" top="6555" width="480" height="480">
   </BOUNDS>
   <BOUNDS type="Node" left="5835" top="6555" width="0" height="0">
   </BOUNDS>
   <PIN pinname="Units" slicecount="1" values="||">
   </PIN>
   <PIN pinname="Precision" slicecount="1" values="4">
   </PIN>
   <PIN pinname="Value Type" slicecount="1" values="Boolean">
   </PIN>
   <PIN pinname="Behavior" slicecount="1" values="Toggle">
   </PIN>
   <PIN pinname="Descriptive Name" slicecount="1" values="Compiled">
   </PIN>
   <PIN pinname="Y Input Value" visible="1" slicecount="1" values="1">
   </PIN>
   </NODE>
   <NODE id="25" nodename="IOBox (Node)" componentmode="InABox" systemname="IOBox (Node)">
   <BOUNDS type="Box" left="705" top="1935" width="795" height="240">
   </BOUNDS>
   <BOUNDS type="Node" left="705" top="1935" width="0" height="0">
   </BOUNDS>
   <PIN pinname="Input Node" slicecount="1" visible="1" values="||">
   </PIN>
   <PIN pinname="Descriptive Name" slicecount="1" values="|Function Parameter Semantics|">
   </PIN>
   <PIN pinname="Output Node" visible="1">
   </PIN>
   </NODE>
   <NODE id="24" nodename="IOBox (Node)" componentmode="InABox" systemname="IOBox (Node)">
   <BOUNDS type="Box" left="1005" top="2430" width="795" height="240">
   </BOUNDS>
   <BOUNDS type="Node" left="1005" top="2430" width="0" height="0">
   </BOUNDS>
   <PIN pinname="Input Node" slicecount="1" visible="1" values="||">
   </PIN>
   <PIN pinname="Descriptive Name" slicecount="1" values="|Function Resource Semantics|">
   </PIN>
   <PIN pinname="Output Node" visible="1">
   </PIN>
   </NODE>
   <LINK srcnodeid="25" srcpinname="Output Node" dstnodeid="2" dstpinname="Custom Semantics">
   </LINK>
   <LINK srcnodeid="24" srcpinname="Output Node" dstnodeid="2" dstpinname="Resource Semantics">
   </LINK>
   <NODE systemname="Self (VVVV)" nodename="Self (VVVV)" componentmode="Hidden" id="39">
   <BOUNDS type="Node" left="8430" top="5265" width="100" height="100">
   </BOUNDS>
   <PIN pinname="Query Save" slicecount="1" visible="1" values="0">
   </PIN>
   </NODE>
   <NODE nodename="IOBox (Value Advanced)" componentmode="InABox" id="40" systemname="IOBox (Value Advanced)">
   <BOUNDS type="Box" left="8430" top="4590" width="480" height="480">
   </BOUNDS>
   <BOUNDS type="Node" left="8430" top="4590" width="0" height="0">
   </BOUNDS>
   <PIN pinname="Y Input Value" slicecount="1" visible="1" values="0">
   </PIN>
   <PIN pinname="Units" slicecount="1" values="||">
   </PIN>
   <PIN pinname="Precision" slicecount="1" values="4">
   </PIN>
   <PIN pinname="Value Type" slicecount="1" values="Boolean">
   </PIN>
   <PIN pinname="Behavior" slicecount="1" values="Toggle">
   </PIN>
   </NODE>
   <LINK srcnodeid="40" srcpinname="Y Output Value" dstnodeid="39" dstpinname="Query Save">
   </LINK>
   <NODE nodename="IOBox (Color)" componentmode="InABox" id="43" systemname="IOBox (Color)">
   <BOUNDS type="Box" left="5430" top="2760" width="2250" height="480">
   </BOUNDS>
   <BOUNDS type="Node" left="5430" top="2760" width="0" height="0">
   </BOUNDS>
   <PIN pinname="Color Input" slicecount="1" visible="1" values="|0.00000,0.00000,0.00000,0.00000|">
   </PIN>
   <PIN pinname="Descriptive Name" slicecount="1" values="|Background Color|">
   </PIN>
   <PIN pinname="Color Output" visible="1">
   </PIN>
   </NODE>
   <NODE nodename="IOBox (Enumerations)" componentmode="InABox" id="47" systemname="IOBox (Enumerations)">
   <BOUNDS type="Box" left="4980" top="1890" width="1590" height="270">
   </BOUNDS>
   <BOUNDS type="Node" left="4980" top="1890" width="0" height="0">
   </BOUNDS>
   <PIN pinname="Input Enum" slicecount="1" visible="1" values="R32G32B32A32_Float">
   </PIN>
   <PIN pinname="Descriptive Name" slicecount="1" values="|Target Format|">
   </PIN>
   <PIN pinname="Output Enum" visible="1">
   </PIN>
   </NODE>
   <NODE systemname="Renderer (DX11 Volume)" filename="%VVVV%\packs\dx11\nodes\plugins\base\VVVV.DX11.Nodes.dll" nodename="Renderer (DX11 Volume)" componentmode="Hidden" id="49">
   <BOUNDS type="Node" left="2400" top="6150" width="100" height="100">
   </BOUNDS>
   <PIN pinname="Target Format" visible="1">
   </PIN>
   <PIN pinname="Texture SizeXYZ" visible="1">
   </PIN>
   <PIN pinname="Layer" visible="1" slicecount="1" values="||">
   </PIN>
   <PIN pinname="Buffers" visible="1">
   </PIN>
   <PIN pinname="Background Color" visible="1">
   </PIN>
   </NODE>
   <LINK srcnodeid="47" srcpinname="Output Enum" dstnodeid="49" dstpinname="Target Format">
   </LINK>
   <NODE nodename="IOBox (Value Advanced)" componentmode="InABox" id="50" systemname="IOBox (Value Advanced)">
   <BOUNDS type="Box" left="7410" top="1035" width="795" height="720">
   </BOUNDS>
   <BOUNDS type="Node" left="7410" top="1035" width="0" height="0">
   </BOUNDS>
   <PIN pinname="Y Input Value" slicecount="3" visible="1" values="256,256,256">
   </PIN>
   <PIN pinname="Units" slicecount="1" values="||">
   </PIN>
   <PIN pinname="Precision" slicecount="1" values="4">
   </PIN>
   <PIN pinname="Vector Size" slicecount="1" values="3">
   </PIN>
   <PIN pinname="Rows" slicecount="1" values="3">
   </PIN>
   <PIN pinname="Descriptive Name" slicecount="1" values="|Texture SizeXYZ|">
   </PIN>
   <PIN pinname="Value Type" slicecount="1" values="Integer">
   </PIN>
   <PIN pinname="Y Output Value" visible="1">
   </PIN>
   </NODE>
   <LINK srcnodeid="50" srcpinname="Y Output Value" dstnodeid="49" dstpinname="Texture SizeXYZ">
   </LINK>
   <NODE systemname="Dispatcher (DX11.Drawer)" filename="%VVVV%\packs\dx11\nodes\plugins\base\VVVV.DX11.Nodes.dll" nodename="Dispatcher (DX11.Drawer)" componentmode="Hidden" id="56">
   <BOUNDS type="Node" left="8205" top="3600" width="1020" height="270">
   </BOUNDS>
   <PIN pinname="Thread X" visible="1" slicecount="1" values="1">
   </PIN>
   <PIN pinname="Thread Y" visible="1" slicecount="1" values="1">
   </PIN>
   <PIN pinname="Thread Z" visible="1" slicecount="1" values="1">
   </PIN>
   <PIN pinname="Geometry Out" visible="1">
   </PIN>
   </NODE>
   <NODE systemname="Divide (Value)" nodename="Divide (Value)" componentmode="Hidden" id="55">
   <BOUNDS type="Node" left="8295" top="2880" width="100" height="100">
   </BOUNDS>
   <PIN pinname="Input 2" slicecount="1" values="8">
   </PIN>
   <PIN pinname="Input" visible="1" slicecount="1" values="1">
   </PIN>
   <PIN pinname="Output" visible="1">
   </PIN>
   </NODE>
   <LINK srcnodeid="50" srcpinname="Y Output Value" dstnodeid="55" dstpinname="Input">
   </LINK>
   <NODE nodename="IOBox (Node)" componentmode="InABox" id="58" systemname="IOBox (Node)">
   <BOUNDS type="Box" left="2415" top="7635" width="795" height="240">
   </BOUNDS>
   <BOUNDS type="Node" left="2415" top="7635" width="0" height="0">
   </BOUNDS>
   <PIN pinname="Descriptive Name" slicecount="1" values="Volume">
   </PIN>
   </NODE>
   <LINK srcnodeid="49" srcpinname="Buffers" dstnodeid="58" dstpinname="Input Node">
   </LINK>
   <LINK srcnodeid="43" srcpinname="Color Output" dstnodeid="49" dstpinname="Background Color">
   </LINK>
   <LINK srcnodeid="2" srcpinname="Layer Out" dstnodeid="49" dstpinname="Layer">
   </LINK>
   <NODE systemname="Vector (3d Split)" nodename="Vector (3d Split)" componentmode="Hidden" id="59">
   <BOUNDS type="Node" left="8220" top="3270" width="100" height="100">
   </BOUNDS>
   <PIN pinname="XYZ" visible="1">
   </PIN>
   <PIN pinname="X" visible="1">
   </PIN>
   <PIN pinname="Y" visible="1">
   </PIN>
   <PIN pinname="Z" visible="1">
   </PIN>
   </NODE>
   <LINK srcnodeid="55" srcpinname="Output" dstnodeid="59" dstpinname="XYZ">
   </LINK>
   <LINK srcnodeid="59" srcpinname="X" dstnodeid="56" dstpinname="Thread X">
   </LINK>
   <LINK srcnodeid="59" srcpinname="Y" dstnodeid="56" dstpinname="Thread Y">
   </LINK>
   <LINK srcnodeid="59" srcpinname="Z" dstnodeid="56" dstpinname="Thread Z">
   </LINK>
   <PACK Name="dx11" Version="1.3.1.1">
   </PACK>
   <NODE systemname="AsVolume_VF3D (DX11.Effect)" filename="%VVVV%\packs\FieldTrip\nodes\modules\Implementations\Render\AsVolume\AsVolume_VF3D.fx" nodename="AsVolume_VF3D (DX11.Effect)" componentmode="Hidden" id="60">
   <BOUNDS type="Node" left="2025" top="1095" width="100" height="100">
   </BOUNDS>
   <PIN pinname="Shader Path" visible="1" pintype="Output">
   </PIN>
   </NODE>
   <LINK srcnodeid="60" srcpinname="Shader Path" dstnodeid="9" dstpinname="File Path">
   </LINK>
   <NODE nodename="IOBox (Node)" componentmode="InABox" id="61" systemname="IOBox (Node)">
   <BOUNDS type="Box" left="990" top="120" width="795" height="240">
   </BOUNDS>
   <BOUNDS type="Node" left="990" top="120" width="0" height="0">
   </BOUNDS>
   <PIN pinname="Descriptive Name" slicecount="1" values="Input">
   </PIN>
   <PIN pinname="Output Node" visible="1">
   </PIN>
   </NODE>
   <NODE systemname="Split (VF3D)" filename="%VVVV%\packs\FieldTrip\nodes\plugins\FieldTripHelpers.dll" nodename="Split (VF3D)" componentmode="Hidden" id="62">
   <BOUNDS type="Node" left="975" top="495" width="100" height="100">
   </BOUNDS>
   <BOUNDS type="Box" left="975" top="495" width="3000" height="3000">
   </BOUNDS>
   <PIN pinname="Input" visible="1" slicecount="1" values="||">
   </PIN>
   <PIN pinname="HLSL" visible="1">
   </PIN>
   <PIN pinname="Custom Semantics" visible="1">
   </PIN>
   <PIN pinname="Resource Semantics" visible="1">
   </PIN>
   </NODE>
   <LINK srcnodeid="61" srcpinname="Output Node" dstnodeid="62" dstpinname="Input">
   </LINK>
   <LINK srcnodeid="62" srcpinname="HLSL" dstnodeid="5" dstpinname="Input String">
   </LINK>
   <LINK srcnodeid="62" srcpinname="Custom Semantics" dstnodeid="25" dstpinname="Input Node">
   </LINK>
   <LINK srcnodeid="62" srcpinname="Resource Semantics" dstnodeid="24" dstpinname="Input Node">
   </LINK>
   <NODE systemname="Shader (DX11.Effect Fieldtrip String)" filename="%VVVV%\packs\FieldTrip\nodes\plugins\FieldTripHelpers.dll" nodename="Shader (DX11.Effect Fieldtrip String)" componentmode="Hidden" id="7">
   <BOUNDS type="Node" left="2040" top="4245" width="5040" height="270">
   </BOUNDS>
   <PIN pinname="ShaderCode" visible="1">
   </PIN>
   <PIN pinname="ConfigShader" slicecount="1" values="|////////////////////////////////////////////////////////////////////////////////////////////////&cr;&lf;//&cr;&lf;//&tab;&tab;3D Vector Noise Basis Functions&cr;&lf;//&cr;&lf;////////////////////////////////////////////////////////////////////////////////////////////////&cr;&lf;// This token will be replaced with function name via RegExpr: &quot;fNoiseV3D_0_&quot;&cr;&lf;&cr;&lf;// ensures the function is defined only once per instance&cr;&lf;#ifndef fNoiseV3D_0_BODY &cr;&lf;#define fNoiseV3D_0_BODY&cr;&lf;&cr;&lf;#ifndef NOISE_FXH&cr;&lf;#include &lt;packs\happy.fxh\noise.fxh&gt;&cr;&lf;#endif&cr;&lf;&cr;&lf;#ifndef MAP_FXH&cr;&lf;#include &lt;packs\happy.fxh\map.fxh&gt;&cr;&lf;#endif&cr;&lf;&cr;&lf;#define fNoiseV3D_0_NOISEBASIS perlin3&cr;&lf;#define fNoiseV3D_0_INFLECTION 0&cr;&lf;#ifndef fNoiseV3D_0_NOISEBASIS&cr;&lf;#define fNoiseV3D_0_NOISEBASIS simplex3&cr;&lf;#endif&cr;&lf;&cr;&lf;#ifndef fNoiseV3D_0_WORLEYOPTIONS&cr;&lf;#define fNoiseV3D_0_WORLEYOPTIONS&cr;&lf;#endif&cr;&lf;&cr;&lf;#ifndef fNoiseV3D_0_INFLECTION&cr;&lf;#define fNoiseV3D_0_INFLECTION 0&cr;&lf;#endif&cr;&lf;&cr;&lf;// parameters&cr;&lf;float3 fNoiseV3D_0_freq : fNoiseV3D_0_FREQ = 2; &cr;&lf;float3 fNoiseV3D_0_amp : fNoiseV3D_0_AMP = .1; &cr;&lf;float3 fNoiseV3D_0_center : fNoiseV3D_0_CENTER; &cr;&lf;float3 fNoiseV3D_0_bias : fNoiseV3D_0_BIAS = 0.5;&cr;&lf;float3 fNoiseV3D_0_domainOffset : fNoiseV3D_0_DOMAINOFFSET;&cr;&lf;&cr;&lf;float3 fNoiseV3D_0_ (float3 p)&cr;&lf;{&cr;&lf;&tab;p = p * fNoiseV3D_0_freq + fNoiseV3D_0_domainOffset;&cr;&lf;&tab;&cr;&lf;&tab;float3 noise = fNoiseV3D_0_NOISEBASIS(p  fNoiseV3D_0_WORLEYOPTIONS);&cr;&lf;&tab;noise.x = sign(noise.x) * bias(abs(noise.x), fNoiseV3D_0_bias.x);&cr;&lf;&tab;noise.y = sign(noise.y) * bias(abs(noise.y), fNoiseV3D_0_bias.y);&cr;&lf;&tab;noise.z = sign(noise.z) * bias(abs(noise.z), fNoiseV3D_0_bias.z);&cr;&lf;&tab;#if fNoiseV3D_0_INFLECTION == 1&cr;&lf;&tab;// Billow&cr;&lf;&tab;noise = abs(noise);&cr;&lf;&tab;#elif fNoiseV3D_0_INFLECTION == 2&cr;&lf;&tab;//Ridge&cr;&lf;&tab;noise = 1 - abs(noise);&cr;&lf;&tab;#endif&cr;&lf;&tab;return noise * fNoiseV3D_0_amp + fNoiseV3D_0_center;&cr;&lf;}&cr;&lf;// end of the function body&cr;&lf;#endif &cr;&lf;&cr;&lf;////////////////////////////////////////////////////////////////////////////////////////////////&cr;&lf;#ifndef fDomainDistortionV3D_0_INPUT&cr;&lf;#define fDomainDistortionV3D_0_INPUT fNoiseV3D_0_&cr;&lf;#endif&cr;&lf;////////////////////////////////////////////////////////////////////////////////////////////////&cr;&lf;&cr;&lf;&cr;&lf;&cr;&lf;&cr;&lf;&cr;&lf;&cr;&lf;&cr;&lf;////////////////////////////////////////////////////////////////////////////////////////////////&cr;&lf;//&cr;&lf;//&tab;&tab;Divergence Free Noise 3D Vector Field Function&cr;&lf;//&cr;&lf;////////////////////////////////////////////////////////////////////////////////////////////////&cr;&lf;// This token will be replaced with function name via RegExpr: &quot;fNoiseDFV_0_&quot;&cr;&lf;&cr;&lf;// ensures the function is defined only once per instance&cr;&lf;#ifndef fNoiseDFV_0_BODY &cr;&lf;#define fNoiseDFV_0_BODY&cr;&lf;&cr;&lf;#define fNoiseDFV_0_NOISEBASIS simplexDFV&cr;&lf;#define fNoiseDFV_0_INFLECTION 0&cr;&lf;#ifndef fNoiseDFV_0_NOISEBASIS&cr;&lf;#define fNoiseDFV_0_NOISEBASIS perlinDFV&cr;&lf;#endif&cr;&lf;&cr;&lf;#ifndef fNoiseDFV_0_WORLEYOPTIONS&cr;&lf;#define fNoiseDFV_0_WORLEYOPTIONS&cr;&lf;#endif&cr;&lf;&cr;&lf;#ifndef NOISE_FXH&cr;&lf;#include &lt;packs\happy.fxh\noise.fxh&gt;&cr;&lf;#endif&cr;&lf;&cr;&lf;&cr;&lf;&cr;&lf;// parameters&cr;&lf;float3 fNoiseDFV_0_noiseFreq : fNoiseDFV_0_NOISEFREQ = 2; &cr;&lf;float3 fNoiseDFV_0_noiseAmp : fNoiseDFV_0_NOISEAMP = .1; &cr;&lf;float3 fNoiseDFV_0_noiseOffset : fNoiseDFV_0_NOISEOFFSET;&cr;&lf;float3 fNoiseDFV_0_center : fNoiseDFV_0_CENTER;&cr;&lf;&tab;&cr;&lf;&cr;&lf;float3 fNoiseDFV_0_ (float3 p)&cr;&lf;{&cr;&lf;&tab;return fNoiseDFV_0_NOISEBASIS(p * fNoiseDFV_0_noiseFreq + fNoiseDFV_0_noiseOffset fNoiseDFV_0_WORLEYOPTIONS) * fNoiseDFV_0_noiseAmp + fNoiseDFV_0_center;&cr;&lf;}&cr;&lf;// end of the function body&cr;&lf;#endif &cr;&lf;&cr;&lf;////////////////////////////////////////////////////////////////////////////////////////////////&cr;&lf;#ifndef fDomainDistortionV3D_0_DISTORTION&cr;&lf;#define fDomainDistortionV3D_0_DISTORTION fNoiseDFV_0_&cr;&lf;#endif&cr;&lf;////////////////////////////////////////////////////////////////////////////////////////////////&cr;&lf;&cr;&lf;&cr;&lf;&cr;&lf;&cr;&lf;&cr;&lf;&cr;&lf;&cr;&lf;////////////////////////////////////////////////////////////////////////////////////////////////&cr;&lf;//&cr;&lf;//&tab;&tab;3D Vector Domain Distortion Function&cr;&lf;//&cr;&lf;////////////////////////////////////////////////////////////////////////////////////////////////&cr;&lf;// This token will be replaced with function name via RegExpr: &quot;fDomainDistortionV3D_0_&quot;&cr;&lf;&cr;&lf;// ensures the function is defined only once per instance&cr;&lf;#ifndef fDomainDistortionV3D_0_BODY &cr;&lf;#define fDomainDistortionV3D_0_BODY&cr;&lf;&cr;&lf;&cr;&lf;// Input fScalarOpV3D_0_INPUT1 function placeholder&cr;&lf;#ifndef fDomainDistortionV3D_0_INPUT&cr;&lf;#define fDomainDistortionV3D_0_INPUT normalize&cr;&lf;#endif&cr;&lf;&cr;&lf;// Input fScalarOpV3D_0_INPUT1 function placeholder&cr;&lf;#ifndef fDomainDistortionV3D_0_DISTORTION&cr;&lf;#define fDomainDistortionV3D_0_DISTORTION normalize&cr;&lf;#endif&cr;&lf;&cr;&lf;// Parameters&cr;&lf;float fDomainDistortionV3D_0_Strength : fDomainDistortionV3D_0_STRENGTH = 1.0;&cr;&lf;&cr;&lf;float3 fDomainDistortionV3D_0_ (float3 p)&cr;&lf;{&cr;&lf;&tab;p += fDomainDistortionV3D_0_DISTORTION(p) * fDomainDistortionV3D_0_Strength;&cr;&lf;&tab;return fDomainDistortionV3D_0_INPUT(p);&cr;&lf;}&cr;&lf;// end of the function body&cr;&lf;#endif &cr;&lf;&cr;&lf;////////////////////////////////////////////////////////////////////////////////////////////////&cr;&lf;#ifndef fScalarOpV3D_0_INPUT1&cr;&lf;#define fScalarOpV3D_0_INPUT1 fDomainDistortionV3D_0_&cr;&lf;#endif&cr;&lf;////////////////////////////////////////////////////////////////////////////////////////////////&cr;&lf;&cr;&lf;&cr;&lf;&cr;&lf;&cr;&lf;&cr;&lf;&cr;&lf;&cr;&lf;&cr;&lf;////////////////////////////////////////////////////////////////////////////////////////////////&cr;&lf;//&cr;&lf;//&tab;&tab;Simple Sphere Distance Class&cr;&lf;//&cr;&lf;////////////////////////////////////////////////////////////////////////////////////////////////&cr;&lf;// This token will be replaced with function name via RegExpr: &quot;fSphere3DSDF_1_&quot;&cr;&lf;&cr;&lf;// ensures the function is defined only once per instance&cr;&lf;#ifndef fSphere3DSDF_1_BODY &cr;&lf;#define fSphere3DSDF_1_BODY&cr;&lf;&cr;&lf;#ifndef SDF_FXH&cr;&lf;#include &lt;packs\happy.fxh\sdf.fxh&gt;&cr;&lf;#endif&cr;&lf;&cr;&lf;// Parameters&cr;&lf;StructuredBuffer&lt;float3&gt; fSphere3DSDF_1_pos : fSphere3DSDF_1_POS;&cr;&lf;StructuredBuffer&lt;float&gt; fSphere3DSDF_1_radius : fSphere3DSDF_1_RADIUS;&cr;&lf;int fSphere3DSDF_1_count : fSphere3DSDF_1_COUNT = 1 ;&cr;&lf;&cr;&lf;float fSphere3DSDF_1_ (float3 p)&cr;&lf;{&cr;&lf;&tab;float d = 999999;&cr;&lf;&tab;for(int i = 0; i&lt; fSphere3DSDF_1_count; i++)&cr;&lf;&tab;{&cr;&lf;&tab;&tab;d = min (d, fSphere(p-fSphere3DSDF_1_pos[i], fSphere3DSDF_1_radius[i]));&lf;&tab;}&cr;&lf;&tab;return d;&cr;&lf;}&cr;&lf;// end of the function body&cr;&lf;#endif &cr;&lf;&cr;&lf;////////////////////////////////////////////////////////////////////////////////////////////////&cr;&lf;#ifndef fFalloffS3D_0_INPUT&cr;&lf;#define fFalloffS3D_0_INPUT fSphere3DSDF_1_&cr;&lf;#endif&cr;&lf;////////////////////////////////////////////////////////////////////////////////////////////////&cr;&lf;&cr;&lf;&cr;&lf;&cr;&lf;&cr;&lf;&cr;&lf;////////////////////////////////////////////////////////////////////////////////////////////////&cr;&lf;//&cr;&lf;//&tab;&tab;3D Scalar Falloff op&cr;&lf;//&cr;&lf;////////////////////////////////////////////////////////////////////////////////////////////////&cr;&lf;// This token will be replaced with function name via RegExpr: &quot;fFalloffS3D_0_&quot;&cr;&lf;&cr;&lf;// ensures the function is defined only once per instance&cr;&lf;#ifndef fFalloffS3D_0_BODY &cr;&lf;#define fFalloffS3D_0_BODY&cr;&lf;&cr;&lf;// Input fScalarOpV3D_0_INPUT2 function placeholder&cr;&lf;#ifndef fFalloffS3D_0_INPUT&cr;&lf;#define fFalloffS3D_0_INPUT length&cr;&lf;#endif&cr;&lf;&cr;&lf;&cr;&lf;#ifndef MAP_FXH&cr;&lf;#include &lt;packs\happy.fxh\map.fxh&gt;&cr;&lf;#endif&cr;&lf;&cr;&lf;#ifndef fFalloffS3D_0_MAPMODE&cr;&lf;#define fFalloffS3D_0_MAPMODE map&cr;&lf;#endif&cr;&lf;&cr;&lf;&cr;&lf;// parameters&cr;&lf;&cr;&lf;float fFalloffS3D_0_falloffDist : fFalloffS3D_0_FALLOFFDIST;&cr;&lf;float fFalloffS3D_0_bias : fFalloffS3D_0_BIAS;&cr;&lf;&cr;&lf;&cr;&lf;float fFalloffS3D_0_ (float3 p)&cr;&lf;{  &cr;&lf;&tab;float dist = fFalloffS3D_0_INPUT(p);&cr;&lf;&tab;return bias(1.0 - mapClamp(fFalloffS3D_0_INPUT(p), 0, fFalloffS3D_0_falloffDist, 0, 1), fFalloffS3D_0_bias);&cr;&lf;}&cr;&lf;// end of the function body&cr;&lf;#endif &cr;&lf;&cr;&lf;////////////////////////////////////////////////////////////////////////////////////////////////&cr;&lf;#ifndef fScalarOpV3D_0_INPUT2&cr;&lf;#define fScalarOpV3D_0_INPUT2 fFalloffS3D_0_&cr;&lf;#endif&cr;&lf;////////////////////////////////////////////////////////////////////////////////////////////////&cr;&lf;&cr;&lf;&cr;&lf;&cr;&lf;&cr;&lf;&cr;&lf;&cr;&lf;&cr;&lf;&cr;&lf;////////////////////////////////////////////////////////////////////////////////////////////////&cr;&lf;//&cr;&lf;//&tab;&tab;3D Vector Field with Scalar Field/Defualt Operand Basic Ops Functions + - * /&cr;&lf;//&cr;&lf;////////////////////////////////////////////////////////////////////////////////////////////////&cr;&lf;// This token will be replaced with function name via RegExpr: &quot;fScalarOpV3D_0_&quot;&cr;&lf;&cr;&lf;// ensures the function is defined only once per instance&cr;&lf;#ifndef fScalarOpV3D_0_BODY &cr;&lf;#define fScalarOpV3D_0_BODY&cr;&lf;&cr;&lf;&cr;&lf;#define fScalarOpV3D_0_OP fScalarOpV3D_0_INPUT1(p) * fScalarOpV3D_0_INPUT2(p)&cr;&lf;#ifndef fScalarOpV3D_0_OP&cr;&lf;#define fScalarOpV3D_0_OP fScalarOpV3D_0_INPUT1(p) + fScalarOpV3D_0_INPUT2(p); &cr;&lf;#endif&cr;&lf;&cr;&lf;// Parameters&cr;&lf;float fScalarOpV3D_0_Default : fScalarOpV3D_0_DEFAULT;&cr;&lf;float fScalarOpV3D_0_reverseOrder : fScalarOpV3D_0_REVERSEORDER;&cr;&lf;&cr;&lf;// Input VF3D function placeholder&cr;&lf;#ifndef fScalarOpV3D_0_INPUT1&cr;&lf;#define fScalarOpV3D_0_INPUT1 normalize&cr;&lf;#endif&cr;&lf;&cr;&lf;// Input 2 Defualt option&cr;&lf;#ifndef fScalarOpV3D_0_INPUT2&cr;&lf;float fScalarOpV3D_0_singleValue (float3 p)&cr;&lf;{&cr;&lf;&tab;return fScalarOpV3D_0_Default; // if a second input class is not provided defualt to semantic&cr;&lf;}&cr;&lf;#define fScalarOpV3D_0_INPUT2 fScalarOpV3D_0_singleValue&cr;&lf;#endif&cr;&lf;&cr;&lf;float3 fScalarOpV3D_0_ (float3 p)&cr;&lf;{&cr;&lf;&tab;return fScalarOpV3D_0_OP; &cr;&lf;}&cr;&lf;// end of the function body&cr;&lf;#endif &cr;&lf;&cr;&lf;////////////////////////////////////////////////////////////////////////////////////////////////&cr;&lf;#ifndef VF3D&cr;&lf;#define VF3D fScalarOpV3D_0_&cr;&lf;#endif&cr;&lf;////////////////////////////////////////////////////////////////////////////////////////////////&cr;&lf;&cr;&lf;&cr;&lf;&cr;&lf;&cr;&lf;&cr;&lf;&cr;&lf;#ifndef CALC_FXH&cr;&lf;#include &lt;packs\happy.fxh\calc.fxh&gt;&cr;&lf;#endif&cr;&lf;&cr;&lf;#ifndef VF3D&cr;&lf;#define VF3D placeHolderV3 // Just a place holder&cr;&lf;#endif&cr;&lf;&cr;&lf;&cr;&lf;&cr;&lf;RWTexture3D&lt;float4&gt; OUTPUT : BACKBUFFER;&lf;&lf;float4x4 InvTransform;&lf;float3 InvVolumeSize : INVTARGETSIZE;&cr;&lf;&cr;&lf;&cr;&lf;&cr;&lf;&cr;&lf;&lf;&lf;[numthreads(8, 8, 8)]&lf;void CS_Vol( uint3 ti : SV_DispatchThreadID)&lf;{ &lf;&tab;float3 p = ti;&lf;&tab;p *= InvVolumeSize;&lf;&tab;p -= 0.5f;&cr;&lf;&tab;float3 tp = mul(float4(p,1),InvTransform).xyz;&cr;&lf;&tab;OUTPUT[ti] = float4(VF3D(tp), 1.0);&lf;}&cr;&lf;&cr;&lf;&cr;&lf;&cr;&lf;&cr;&lf;technique11 AsVolume&cr;&lf;{&lf;&tab;pass P0&lf;&tab;{&lf;&tab;&tab;SetComputeShader( CompileShader( cs_5_0, CS_Vol() ) );&lf;&tab;}&lf;}&cr;&lf;&cr;&lf;&cr;&lf;&cr;&lf;&cr;&lf;&cr;&lf;&cr;&lf;|">
   </PIN>
   <PIN pinname="ConfigDefines" slicecount="1" values="||">
   </PIN>
   <PIN pinname="Technique" slicecount="1" visible="1" values="AsVolume">
   </PIN>
   <PIN pinname="Layer" visible="1">
   </PIN>
   <PIN pinname="Geometry" visible="1">
   </PIN>
   <PIN pinname="March Step Length" visible="1">
   </PIN>
   <PIN pinname="March Min Distance" visible="1">
   </PIN>
   <PIN pinname="March Max Distance" visible="1">
   </PIN>
   <PIN pinname="March Max Iterations" visible="1">
   </PIN>
   <PIN pinname="Enabled" visible="1">
   </PIN>
   <PIN pinname="Render State" visible="1" slicecount="1" values="||">
   </PIN>
   <PIN pinname="Defines" visible="1" pintype="Input" slicecount="1" values="||">
   </PIN>
   <PIN pinname="Technique Valid" visible="1">
   </PIN>
   <PIN pinname="softness" slicecount="1" visible="1" values="0.01">
   </PIN>
   <PIN pinname="xAspect" visible="1">
   </PIN>
   <PIN pinname="apsectRatioXY" visible="1" slicecount="2" values="0.673154354095459,0.5">
   </PIN>
   <PIN pinname="Color" slicecount="1" values="|0.84152,0.84152,0.84152,1.00000|">
   </PIN>
   <PIN pinname="drawCol" slicecount="1" values="|0.70146,0.96664,0.85429,1.00000|">
   </PIN>
   <PIN pinname="drawColXYZW" slicecount="4" visible="1" values="0,0,0,1">
   </PIN>
   <PIN pinname="Compiled" visible="1">
   </PIN>
   <PIN pinname="InvTransform" visible="1">
   </PIN>
   </NODE>
   <LINK srcnodeid="7" srcpinname="Layer" dstnodeid="2" dstpinname="Layer In">
   </LINK>
   <LINK srcnodeid="15" srcpinname="Y Output Value" dstnodeid="7" dstpinname="Enabled">
   </LINK>
   <LINK srcnodeid="16" srcpinname="Output Node" dstnodeid="7" dstpinname="Render State">
   </LINK>
   <LINK srcnodeid="6" srcpinname="Output" dstnodeid="7" dstpinname="ShaderCode">
   </LINK>
   <LINK srcnodeid="56" srcpinname="Geometry Out" dstnodeid="7" dstpinname="Geometry">
   </LINK>
   <LINK srcnodeid="7" srcpinname="Compiled" dstnodeid="21" dstpinname="Y Input Value">
   </LINK>
   <INFO author="" description="Renders a volume from a 3D scalar field" tags="">
   </INFO>
   <NODE systemname="Inverse (Transform)" nodename="Inverse (Transform)" componentmode="Hidden" id="63">
   <BOUNDS type="Node" left="4635" top="1065" width="100" height="100">
   </BOUNDS>
   <PIN pinname="Source" visible="1" slicecount="1" values="||">
   </PIN>
   <PIN pinname="Transform Out" visible="1">
   </PIN>
   </NODE>
   <NODE nodename="IOBox (Node)" componentmode="InABox" id="64">
   <BOUNDS type="Box" left="4710" top="645" width="795" height="240">
   </BOUNDS>
   <BOUNDS type="Node" left="4710" top="645" width="0" height="0">
   </BOUNDS>
   <PIN pinname="Input Node" slicecount="1" visible="1" values="||">
   </PIN>
   <PIN pinname="Descriptive Name" slicecount="1" values="Transform">
   </PIN>
   </NODE>
   <LINK srcnodeid="64" srcpinname="Output Node" dstnodeid="63" dstpinname="Source">
   </LINK>
   <LINK srcnodeid="63" srcpinname="Transform Out" dstnodeid="7" dstpinname="InvTransform">
   </LINK>
   <PACK Name="dx11.particles" Version="1.0.6">
   </PACK>
   </PATCH>